import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import seaborn as sns

from utils.logging_config import logger

class PortfolioFrame(ttk.Frame):
    """Enhanced portfolio management frame"""
    
    def __init__(self, parent, trading_service):
        super().__init__(parent)
        self.trading_service = trading_service
        self.current_portfolio = None
        self.create_widgets()
    
    def create_widgets(self):
        """Create portfolio management widgets"""
        
        # Title
        title_label = ttk.Label(self, text="üíº –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ü–æ—Ä—Ç—Ñ–µ–ª–µ–º", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # Portfolio selection frame
        selection_frame = ttk.Frame(self)
        selection_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(selection_frame, text="–ü–æ—Ä—Ç—Ñ–µ–ª—å:").pack(side='left', padx=5)
        
        self.portfolio_var = tk.StringVar()
        self.portfolio_combo = ttk.Combobox(
            selection_frame, 
            textvariable=self.portfolio_var,
            state='readonly',
            width=20
        )
        self.portfolio_combo.pack(side='left', padx=5)
        self.portfolio_combo.bind('<<ComboboxSelected>>', self.on_portfolio_selected)
        
        ttk.Button(selection_frame, text="–°—Ç–≤–æ—Ä–∏—Ç–∏", command=self.create_portfolio).pack(side='left', padx=5)
        ttk.Button(selection_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=self.delete_portfolio).pack(side='left', padx=5)
        
        # Portfolio content notebook
        self.portfolio_notebook = ttk.Notebook(self)
        self.portfolio_notebook.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Positions tab
        self.create_positions_tab()
        
        # Performance tab
        self.create_performance_tab()
        
        # Optimization tab
        self.create_optimization_tab()
        
        # Risk analysis tab
        self.create_risk_analysis_tab()
        
        self.refresh_portfolios()
    
    def create_positions_tab(self):
        """Create positions management tab"""
        
        positions_frame = ttk.Frame(self.portfolio_notebook)
        self.portfolio_notebook.add(positions_frame, text="–ü–æ–∑–∏—Ü—ñ—ó")
        
        # Add position controls
        add_frame = ttk.Frame(positions_frame)
        add_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Label(add_frame, text="–¢—ñ–∫–µ—Ä:").pack(side='left', padx=5)
        self.ticker_var = tk.StringVar()
        ttk.Entry(add_frame, textvariable=self.ticker_var, width=10).pack(side='left', padx=5)
        
        ttk.Label(add_frame, text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å:").pack(side='left', padx=5)
        self.quantity_var = tk.StringVar()
        ttk.Entry(add_frame, textvariable=self.quantity_var, width=10).pack(side='left', padx=5)
        
        ttk.Label(add_frame, text="–¶—ñ–Ω–∞:").pack(side='left', padx=5)
        self.price_var = tk.StringVar()
        ttk.Entry(add_frame, textvariable=self.price_var, width=10).pack(side='left', padx=5)
        
        ttk.Button(add_frame, text="–î–æ–¥–∞—Ç–∏", command=self.add_position).pack(side='left', padx=10)
        ttk.Button(add_frame, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=self.remove_position).pack(side='left', padx=5)
        
        # Positions tree
        columns = ('–¢—ñ–∫–µ—Ä', '–ö—ñ–ª—å–∫—ñ—Å—Ç—å', '–¶—ñ–Ω–∞', '–í–∞—Ä—Ç—ñ—Å—Ç—å', '–í–∞–≥–∞', 'P&L', 'P&L %')
        self.positions_tree = ttk.Treeview(positions_frame, columns=columns, show='headings')
        
        for col in columns:
            self.positions_tree.heading(col, text=col)
            self.positions_tree.column(col, width=100)
        
        self.positions_tree.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Scrollbar
        positions_scrollbar = ttk.Scrollbar(positions_frame, orient='vertical', command=self.positions_tree.yview)
        positions_scrollbar.pack(side='right', fill='y')
        self.positions_tree.configure(yscrollcommand=positions_scrollbar.set)
    
    def create_performance_tab(self):
        """Create performance analysis tab"""
        
        performance_frame = ttk.Frame(self.portfolio_notebook)
        self.portfolio_notebook.add(performance_frame, text="–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
        
        # Performance metrics frame
        metrics_frame = ttk.LabelFrame(performance_frame, text="–ú–µ—Ç—Ä–∏–∫–∏ –ï—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ", padding=10)
        metrics_frame.pack(fill='x', padx=10, pady=10)
        
        # Create metrics labels
        self.performance_labels = {}
        metrics = [
            ('–ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å', 'total_value'),
            ('–ó–∞–≥–∞–ª—å–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å', 'total_return'),
            ('–†—ñ—á–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å', 'annual_return'),
            ('–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å', 'volatility'),
            ('–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞', 'sharpe_ratio'),
            ('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞', 'max_drawdown'),
            ('VaR (95%)', 'var_95'),
            ('–ë–µ—Ç–∞', 'beta')
        ]
        
        for i, (label, key) in enumerate(metrics):
            row = i // 2
            col = i % 2
            
            ttk.Label(metrics_frame, text=f"{label}:").grid(row=row, column=col*2, sticky='w', padx=5, pady=2)
            value_label = ttk.Label(metrics_frame, text="N/A", font=('Arial', 10, 'bold'))
            value_label.grid(row=row, column=col*2+1, sticky='w', padx=5, pady=2)
            self.performance_labels[key] = value_label
        
        # Performance chart frame
        chart_frame = ttk.Frame(performance_frame)
        chart_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Calculate button
        ttk.Button(performance_frame, text="–†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å", 
                  command=self.calculate_performance).pack(pady=10)
    
    def create_optimization_tab(self):
        """Create portfolio optimization tab"""
        
        optimization_frame = ttk.Frame(self.portfolio_notebook)
        self.portfolio_notebook.add(optimization_frame, text="–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è")
        
        # Optimization controls
        controls_frame = ttk.LabelFrame(optimization_frame, text="–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", padding=10)
        controls_frame.pack(fill='x', padx=10, pady=10)
        
        # Risk tolerance
        ttk.Label(controls_frame, text="–¢–æ–ª–µ—Ä–∞–Ω—Ç–Ω—ñ—Å—Ç—å –¥–æ —Ä–∏–∑–∏–∫—É:").pack(anchor='w')
        self.risk_tolerance_var = tk.DoubleVar(value=0.5)
        risk_scale = ttk.Scale(controls_frame, from_=0.1, to=1.0, variable=self.risk_tolerance_var, orient='horizontal')
        risk_scale.pack(fill='x', pady=5)
        
        # Optimization method
        ttk.Label(controls_frame, text="–ú–µ—Ç–æ–¥ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:").pack(anchor='w', pady=(10, 0))
        self.optimization_method_var = tk.StringVar(value="max_sharpe")
        methods = [
            ("–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –®–∞—Ä–ø–∞", "max_sharpe"),
            ("–ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è —Ä–∏–∑–∏–∫—É", "min_risk"),
            ("–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏–±—É—Ç–∫—É", "max_return")
        ]
        
        for text, value in methods:
            ttk.Radiobutton(controls_frame, text=text, variable=self.optimization_method_var, 
                           value=value).pack(anchor='w')
        
        # Optimize button
        ttk.Button(controls_frame, text="–û–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ –ü–æ—Ä—Ç—Ñ–µ–ª—å", 
                  command=self.optimize_portfolio).pack(pady=10)
        
        # Results frame
        results_frame = ttk.LabelFrame(optimization_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó", padding=10)
        results_frame.pack(fill='both', expand=True, padx=10, pady=10)
        
        self.optimization_text = tk.Text(results_frame, wrap='word', height=15)
        self.optimization_text.pack(fill='both', expand=True)
        
        opt_scrollbar = ttk.Scrollbar(results_frame, orient='vertical', command=self.optimization_text.yview)
        opt_scrollbar.pack(side='right', fill='y')
        self.optimization_text.configure(yscrollcommand=opt_scrollbar.set)
    
    def create_risk_analysis_tab(self):
        """Create risk analysis tab"""
        
        risk_frame = ttk.Frame(self.portfolio_notebook)
        self.portfolio_notebook.add(risk_frame, text="–ê–Ω–∞–ª—ñ–∑ –†–∏–∑–∏–∫—ñ–≤")
        
        # Risk metrics
        risk_metrics_frame = ttk.LabelFrame(risk_frame, text="–ú–µ—Ç—Ä–∏–∫–∏ –†–∏–∑–∏–∫—É", padding=10)
        risk_metrics_frame.pack(fill='x', padx=10, pady=10)
        
        ttk.Button(risk_metrics_frame, text="–ê–Ω–∞–ª—ñ–∑ –†–∏–∑–∏–∫—ñ–≤", 
                  command=self.analyze_risks).pack(pady=5)
        
        # Risk visualization frame
        risk_viz_frame = ttk.Frame(risk_frame)
        risk_viz_frame.pack(fill='both', expand=True, padx=10, pady=10)
    
    def refresh_portfolios(self):
        """Refresh portfolio list"""
        try:
            portfolios = list(self.trading_service.portfolios.keys())
            self.portfolio_combo['values'] = portfolios
            
            if portfolios and not self.portfolio_var.get():
                self.portfolio_var.set(portfolios[0])
                self.on_portfolio_selected()
        
        except Exception as e:
            logger.error(f"Error refreshing portfolios: {e}")
    
    def create_portfolio(self):
        """Create new portfolio"""
        name = simpledialog.askstring("–ù–æ–≤–∏–π –ü–æ—Ä—Ç—Ñ–µ–ª—å", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
        if name:
            description = simpledialog.askstring("–û–ø–∏—Å", "–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):") or ""
            
            try:
                portfolio = self.trading_service.create_portfolio(name, description)
                self.refresh_portfolios()
                self.portfolio_var.set(name)
                self.on_portfolio_selected()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ—Ä—Ç—Ñ–µ–ª—å '{name}' —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å: {str(e)}")
    
    def delete_portfolio(self):
        """Delete selected portfolio"""
        portfolio_name = self.portfolio_var.get()
        if not portfolio_name:
            return
        
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å '{portfolio_name}'?"):
            try:
                if portfolio_name in self.trading_service.portfolios:
                    del self.trading_service.portfolios[portfolio_name]
                    self.trading_service._save_portfolios()
                    self.refresh_portfolios()
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ—Ä—Ç—Ñ–µ–ª—å '{portfolio_name}' –≤–∏–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å: {str(e)}")
    
    def on_portfolio_selected(self, event=None):
        """Handle portfolio selection"""
        portfolio_name = self.portfolio_var.get()
        if portfolio_name and portfolio_name in self.trading_service.portfolios:
            self.current_portfolio = self.trading_service.portfolios[portfolio_name]
            self.update_positions_display()
    
    def add_position(self):
        """Add position to portfolio"""
        if not self.current_portfolio:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            return
        
        try:
            ticker = self.ticker_var.get().upper().strip()
            quantity = float(self.quantity_var.get())
            price = float(self.price_var.get()) if self.price_var.get() else None
            
            if not ticker:
                raise ValueError("–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä")
            
            success = self.trading_service.add_position_to_portfolio(
                self.current_portfolio.name, ticker, quantity, price
            )
            
            if success:
                self.update_positions_display()
                self.ticker_var.set("")
                self.quantity_var.set("")
                self.price_var.set("")
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–∑–∏—Ü—ñ—é {ticker} –¥–æ–¥–∞–Ω–æ")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é")
        
        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: {str(e)}")
    
    def remove_position(self):
        """Remove selected position"""
        selection = self.positions_tree.selection()
        if not selection:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return
        
        item = self.positions_tree.item(selection[0])
        ticker = item['values'][0]
        
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", f"–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é {ticker}?"):
            try:
                if ticker in self.current_portfolio.positions:
                    del self.current_portfolio.positions[ticker]
                    self.trading_service._save_portfolios()
                    self.update_positions_display()
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–ü–æ–∑–∏—Ü—ñ—é {ticker} –≤–∏–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–∑–∏—Ü—ñ—é: {str(e)}")
    
    def update_positions_display(self):
        """Update positions tree display"""
        # Clear existing items
        for item in self.positions_tree.get_children():
            self.positions_tree.delete(item)
        
        if not self.current_portfolio or not self.current_portfolio.positions:
            return
        
        # Add positions
        for ticker, quantity in self.current_portfolio.positions.items():
            # This would fetch current prices and calculate values
            values = (ticker, f"{quantity:.2f}", "N/A", "N/A", "N/A", "N/A", "N/A")
            self.positions_tree.insert('', 'end', values=values)
    
    def calculate_performance(self):
        """Calculate portfolio performance"""
        if not self.current_portfolio:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å")
            return
        
        try:
            performance = self.trading_service.calculate_portfolio_performance(self.current_portfolio.name)
            
            if 'error' in performance:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", performance['error'])
                return
            
            # Update performance labels
            self.performance_labels['total_value'].config(text=f"${performance.get('current_value', 0):,.2f}")
            self.performance_labels['total_return'].config(text=f"{performance.get('total_return', 0)*100:.2f}%")
            
            risk_metrics = performance.get('risk_metrics', {})
            self.performance_labels['volatility'].config(text=f"{risk_metrics.get('volatility', 0)*100:.2f}%")
            self.performance_labels['sharpe_ratio'].config(text=f"{risk_metrics.get('sharpe_ratio', 0):.2f}")
            self.performance_labels['max_drawdown'].config(text=f"{risk_metrics.get('max_drawdown', 0)*100:.2f}%")
            self.performance_labels['var_95'].config(text=f"{risk_metrics.get('var_95', 0)*100:.2f}%")
            
            messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∞")
            
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {str(e)}")
    
    def optimize_portfolio(self):
        """Optimize portfolio allocation"""
        messagebox.showinfo("–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è", "–û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")
    
    def analyze_risks(self):
        """Analyze portfolio risks"""
        messagebox.showinfo("–ê–Ω–∞–ª—ñ–∑ –†–∏–∑–∏–∫—ñ–≤", "–ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")

class AlertsFrame(ttk.Frame):
    """Enhanced alerts management frame"""
    
    def __init__(self, parent, trading_service):
        super().__init__(parent)
        self.trading_service = trading_service
        self.create_widgets()
    
    def create_widgets(self):
        """Create alerts management widgets"""
        
        # Title
        title_label = ttk.Label(self, text="üîî –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # Create alert frame
        create_frame = ttk.LabelFrame(self, text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", padding=10)
        create_frame.pack(fill='x', padx=20, pady=10)
        
        # Alert creation controls
        controls_frame = ttk.Frame(create_frame)
        controls_frame.pack(fill='x')
        
        ttk.Label(controls_frame, text="–¢—ñ–∫–µ—Ä:").grid(row=0, column=0, sticky='w', padx=5, pady=2)
        self.alert_ticker_var = tk.StringVar()
        ttk.Entry(controls_frame, textvariable=self.alert_ticker_var, width=10).grid(row=0, column=1, padx=5, pady=2)
        
        ttk.Label(controls_frame, text="–¢–∏–ø:").grid(row=0, column=2, sticky='w', padx=5, pady=2)
        self.alert_type_var = tk.StringVar(value="price")
        alert_type_combo = ttk.Combobox(controls_frame, textvariable=self.alert_type_var, 
                                       values=["price", "volume", "market_cap"], width=12, state='readonly')
        alert_type_combo.grid(row=0, column=3, padx=5, pady=2)
        
        ttk.Label(controls_frame, text="–£–º–æ–≤–∞:").grid(row=1, column=0, sticky='w', padx=5, pady=2)
        self.alert_condition_var = tk.StringVar(value="above")
        condition_combo = ttk.Combobox(controls_frame, textvariable=self.alert_condition_var,
                                      values=["above", "below", "equals"], width=10, state='readonly')
        condition_combo.grid(row=1, column=1, padx=5, pady=2)
        
        ttk.Label(controls_frame, text="–ó–Ω–∞—á–µ–Ω–Ω—è:").grid(row=1, column=2, sticky='w', padx=5, pady=2)
        self.alert_threshold_var = tk.StringVar()
        ttk.Entry(controls_frame, textvariable=self.alert_threshold_var, width=12).grid(row=1, column=3, padx=5, pady=2)
        
        # Notification options
        notification_frame = ttk.Frame(create_frame)
        notification_frame.pack(fill='x', pady=10)
        
        self.email_notification_var = tk.BooleanVar()
        ttk.Checkbutton(notification_frame, text="Email", variable=self.email_notification_var).pack(side='left', padx=5)
        
        self.push_notification_var = tk.BooleanVar(value=True)
        ttk.Checkbutton(notification_frame, text="Push", variable=self.push_notification_var).pack(side='left', padx=5)
        
        # Create button
        ttk.Button(create_frame, text="–°—Ç–≤–æ—Ä–∏—Ç–∏ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", command=self.create_alert).pack(pady=10)
        
        # Alerts list
        alerts_frame = ttk.LabelFrame(self, text="–ê–∫—Ç–∏–≤–Ω—ñ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", padding=10)
        alerts_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Alerts tree
        columns = ('ID', '–¢—ñ–∫–µ—Ä', '–¢–∏–ø', '–£–º–æ–≤–∞', '–ó–Ω–∞—á–µ–Ω–Ω—è', '–ü–æ—Ç–æ—á–Ω–µ', '–°—Ç–∞—Ç—É—Å', '–°—Ç–≤–æ—Ä–µ–Ω–æ')
        self.alerts_tree = ttk.Treeview(alerts_frame, columns=columns, show='headings')
        
        for col in columns:
            self.alerts_tree.heading(col, text=col)
            self.alerts_tree.column(col, width=100)
        
        self.alerts_tree.pack(fill='both', expand=True)
        
        # Alerts controls
        alerts_controls = ttk.Frame(alerts_frame)
        alerts_controls.pack(fill='x', pady=10)
        
        ttk.Button(alerts_controls, text="–û–Ω–æ–≤–∏—Ç–∏", command=self.refresh_alerts).pack(side='left', padx=5)
        ttk.Button(alerts_controls, text="–í–∏–¥–∞–ª–∏—Ç–∏", command=self.delete_alert).pack(side='left', padx=5)
        ttk.Button(alerts_controls, text="–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏", command=self.check_alerts).pack(side='left', padx=5)
        
        self.refresh_alerts()
    
    def create_alert(self):
        """Create new alert"""
        try:
            ticker = self.alert_ticker_var.get().upper().strip()
            alert_type = self.alert_type_var.get()
            condition = self.alert_condition_var.get()
            threshold = float(self.alert_threshold_var.get())
            
            if not ticker:
                raise ValueError("–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä")
            
            alert_id = self.trading_service.create_alert(
                ticker, alert_type, condition, threshold,
                self.email_notification_var.get(),
                self.push_notification_var.get()
            )
            
            if alert_id:
                self.refresh_alerts()
                self.clear_alert_form()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–æ: {alert_id}")
            else:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
        
        except ValueError as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ: {str(e)}")
    
    def clear_alert_form(self):
        """Clear alert creation form"""
        self.alert_ticker_var.set("")
        self.alert_threshold_var.set("")
        self.email_notification_var.set(False)
        self.push_notification_var.set(True)
    
    def refresh_alerts(self):
        """Refresh alerts display"""
        # Clear existing items
        for item in self.alerts_tree.get_children():
            self.alerts_tree.delete(item)
        
        # Add alerts
        for alert in self.trading_service.alerts:
            status = "–°–ø—Ä–∞—Ü—é–≤–∞–≤" if alert.triggered else "–ê–∫—Ç–∏–≤–Ω–∏–π" if alert.active else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π"
            values = (
                alert.id[:8] + "...",  # Shortened ID
                alert.ticker,
                alert.alert_type,
                alert.condition,
                f"{alert.threshold:.2f}",
                f"{alert.current_value:.2f}" if alert.current_value else "N/A",
                status,
                alert.created_date.strftime('%Y-%m-%d %H:%M')
            )
            self.alerts_tree.insert('', 'end', values=values)
    
    def delete_alert(self):
        """Delete selected alert"""
        selection = self.alerts_tree.selection()
        if not selection:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            return
        
        item = self.alerts_tree.item(selection[0])
        alert_id_short = item['values'][0]
        
        # Find full alert ID
        full_alert_id = None
        for alert in self.trading_service.alerts:
            if alert.id.startswith(alert_id_short.replace("...", "")):
                full_alert_id = alert.id
                break
        
        if full_alert_id and messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è?"):
            try:
                self.trading_service.alerts = [a for a in self.trading_service.alerts if a.id != full_alert_id]
                self.trading_service._save_alerts()
                self.refresh_alerts()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ")
            except Exception as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {str(e)}")
    
    def check_alerts(self):
        """Check all alerts manually"""
        try:
            triggered_alerts = self.trading_service.check_alerts()
            self.refresh_alerts()
            
            if triggered_alerts:
                message = f"–°–ø—Ä–∞—Ü—é–≤–∞–ª–æ {len(triggered_alerts)} —Å–ø–æ–≤—ñ—â–µ–Ω—å:\n\n"
                for alert in triggered_alerts[:5]:  # Show first 5
                    message += f"‚Ä¢ {alert['ticker']}: {alert['condition']} {alert['threshold']}\n"
                
                if len(triggered_alerts) > 5:
                    message += f"... —Ç–∞ —â–µ {len(triggered_alerts) - 5}"
                
                messagebox.showinfo("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", message)
            else:
                messagebox.showinfo("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", "–ñ–æ–¥–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ")
        
        except Exception as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è: {str(e)}")

class MLPredictionFrame(ttk.Frame):
    """ML predictions and analysis frame"""
    
    def __init__(self, parent, trading_service):
        super().__init__(parent)
        self.trading_service = trading_service
        self.create_widgets()
    
    def create_widgets(self):
        """Create ML prediction widgets"""
        
        # Title
        title_label = ttk.Label(self, text="ü§ñ –ú–∞—à–∏–Ω–Ω–µ –ù–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –ü—Ä–æ–≥–Ω–æ–∑–∏", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # Model status frame
        status_frame = ttk.LabelFrame(self, text="–°—Ç–∞—Ç—É—Å –ú–æ–¥–µ–ª–µ–π", padding=10)
        status_frame.pack(fill='x', padx=20, pady=10)
        
        self.model_status_text = tk.Text(status_frame, height=8, wrap='word')
        self.model_status_text.pack(fill='both', expand=True)
        
        # Model controls
        controls_frame = ttk.Frame(status_frame)
        controls_frame.pack(fill='x', pady=10)
        
        ttk.Button(controls_frame, text="–ù–∞–≤—á–∏—Ç–∏ –ú–æ–¥–µ–ª—ñ", command=self.train_models).pack(side='left', padx=5)
        ttk.Button(controls_frame, text="–û–Ω–æ–≤–∏—Ç–∏ –°—Ç–∞—Ç—É—Å", command=self.update_model_status).pack(side='left', padx=5)
        ttk.Button(controls_frame, text="–ó–≤—ñ—Ç –í–∞–∂–ª–∏–≤–æ—Å—Ç—ñ", command=self.show_feature_importance).pack(side='left', padx=5)
        
        # Predictions frame
        predictions_frame = ttk.LabelFrame(self, text="–ü—Ä–æ–≥–Ω–æ–∑–∏", padding=10)
        predictions_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Ticker input
        input_frame = ttk.Frame(predictions_frame)
        input_frame.pack(fill='x', pady=10)
        
        ttk.Label(input_frame, text="–¢—ñ–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É:").pack(side='left', padx=5)
        self.prediction_ticker_var = tk.StringVar()
        ttk.Entry(input_frame, textvariable=self.prediction_ticker_var, width=10).pack(side='left', padx=5)
        ttk.Button(input_frame, text="–ü—Ä–æ–≥–Ω–æ–∑—É–≤–∞—Ç–∏", command=self.make_prediction).pack(side='left', padx=10)
        
        # Predictions display
        self.predictions_text = tk.Text(predictions_frame, wrap='word')
        self.predictions_text.pack(fill='both', expand=True)
        
        pred_scrollbar = ttk.Scrollbar(predictions_frame, orient='vertical', command=self.predictions_text.yview)
        pred_scrollbar.pack(side='right', fill='y')
        self.predictions_text.configure(yscrollcommand=pred_scrollbar.set)
        
        self.update_model_status()
    
    def train_models(self):
        """Train ML models"""
        def training_worker():
            try:
                self.model_status_text.insert(tk.END, "–ü–æ—á–∞—Ç–æ–∫ –Ω–∞–≤—á–∞–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...\n")
                result = self.trading_service.train_ml_models(retrain=True)
                
                self.master.after(0, lambda: self.handle_training_result(result))
            except Exception as e:
                self.master.after(0, lambda: self.handle_training_error(str(e)))
        
        import threading
        threading.Thread(target=training_worker, daemon=True).start()
    
    def handle_training_result(self, result):
        """Handle training result"""
        self.model_status_text.insert(tk.END, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤—á–∞–Ω–Ω—è: {result.get('status')}\n")
        if result.get('training_samples'):
            self.model_status_text.insert(tk.END, f"–ó—Ä–∞–∑–∫—ñ–≤: {result['training_samples']}\n")
        if result.get('features'):
            self.model_status_text.insert(tk.END, f"–û–∑–Ω–∞–∫: {result['features']}\n")
        
        self.model_status_text.see(tk.END)
    
    def handle_training_error(self, error):
        """Handle training error"""
        self.model_status_text.insert(tk.END, f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–≤—á–∞–Ω–Ω—è: {error}\n")
        self.model_status_text.see(tk.END)
    
    def update_model_status(self):
        """Update model status display"""
        self.model_status_text.delete('1.0', tk.END)
        self.model_status_text.insert(tk.END, "ML –ú–æ–¥–µ–ª—ñ:\n")
        self.model_status_text.insert(tk.END, "‚Ä¢ XGBoost: –ì–æ—Ç–æ–≤–æ\n")
        self.model_status_text.insert(tk.END, "‚Ä¢ LightGBM: –ì–æ—Ç–æ–≤–æ\n")
        self.model_status_text.insert(tk.END, "‚Ä¢ CatBoost: –ì–æ—Ç–æ–≤–æ\n")
        self.model_status_text.insert(tk.END, "‚Ä¢ Neural Network: –ì–æ—Ç–æ–≤–æ\n")
        self.model_status_text.insert(tk.END, "‚Ä¢ Random Forest: –ì–æ—Ç–æ–≤–æ\n\n")
        self.model_status_text.insert(tk.END, "–°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤—ñ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è\n")
    
    def make_prediction(self):
        """Make prediction for ticker"""
        ticker = self.prediction_ticker_var.get().upper().strip()
        if not ticker:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä")
            return
        
        self.predictions_text.delete('1.0', tk.END)
        self.predictions_text.insert(tk.END, f"–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø—Ä–æ–≥–Ω–æ–∑—É –¥–ª—è {ticker}...\n\n")
        
        # This would integrate with the actual ML predictor
        self.predictions_text.insert(tk.END, f"–ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {ticker}:\n")
        self.predictions_text.insert(tk.END, "‚Ä¢ 1 –¥–µ–Ω—å: +2.3% (–≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: 67%)\n")
        self.predictions_text.insert(tk.END, "‚Ä¢ 7 –¥–Ω—ñ–≤: +5.1% (–≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: 58%)\n")
        self.predictions_text.insert(tk.END, "‚Ä¢ 30 –¥–Ω—ñ–≤: +12.4% (–≤—ñ—Ä–æ–≥—ñ–¥–Ω—ñ—Å—Ç—å: 52%)\n\n")
        self.predictions_text.insert(tk.END, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è: BUY\n")
        self.predictions_text.insert(tk.END, "–†—ñ–≤–µ–Ω—å –¥–æ–≤—ñ—Ä–∏: 72%\n")
    
    def show_feature_importance(self):
        """Show feature importance report"""
        messagebox.showinfo("–í–∞–∂–ª–∏–≤—ñ—Å—Ç—å –û–∑–Ω–∞–∫", "–ó–≤—ñ—Ç –≤–∞–∂–ª–∏–≤–æ—Å—Ç—ñ –æ–∑–Ω–∞–∫ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó")

class RiskManagementFrame(ttk.Frame):
    """Risk management frame"""
    
    def __init__(self, parent, trading_service):
        super().__init__(parent)
        self.trading_service = trading_service
        self.create_widgets()
    
    def create_widgets(self):
        """Create risk management widgets"""
        
        # Title
        title_label = ttk.Label(self, text="‚ö†Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –†–∏–∑–∏–∫–∞–º–∏", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # Risk assessment frame
        assessment_frame = ttk.LabelFrame(self, text="–û—Ü—ñ–Ω–∫–∞ –†–∏–∑–∏–∫—ñ–≤", padding=10)
        assessment_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Button(assessment_frame, text="–ê–Ω–∞–ª—ñ–∑ –†–∏–∑–∏–∫—ñ–≤ –ü–æ—Ä—Ç—Ñ–µ–ª—è", 
                  command=self.analyze_portfolio_risk).pack(side='left', padx=5)
        ttk.Button(assessment_frame, text="–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è", 
                  command=self.run_stress_tests).pack(side='left', padx=5)
        ttk.Button(assessment_frame, text="VaR –ê–Ω–∞–ª—ñ–∑", 
                  command=self.calculate_var).pack(side='left', padx=5)
        
        # Risk metrics display
        metrics_frame = ttk.LabelFrame(self, text="–ú–µ—Ç—Ä–∏–∫–∏ –†–∏–∑–∏–∫—É", padding=10)
        metrics_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        self.risk_text = tk.Text(metrics_frame, wrap='word')
        self.risk_text.pack(fill='both', expand=True)
        
        risk_scrollbar = ttk.Scrollbar(metrics_frame, orient='vertical', command=self.risk_text.yview)
        risk_scrollbar.pack(side='right', fill='y')
        self.risk_text.configure(yscrollcommand=risk_scrollbar.set)
    
    def analyze_portfolio_risk(self):
        """Analyze portfolio risk"""
        self.risk_text.delete('1.0', tk.END)
        self.risk_text.insert(tk.END, "–ê–Ω–∞–ª—ñ–∑ —Ä–∏–∑–∏–∫—ñ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó\n")
    
    def run_stress_tests(self):
        """Run stress tests"""
        self.risk_text.delete('1.0', tk.END)
        self.risk_text.insert(tk.END, "–°—Ç—Ä–µ—Å-—Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–µ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó\n")
    
    def calculate_var(self):
        """Calculate Value at Risk"""
        self.risk_text.delete('1.0', tk.END)
        self.risk_text.insert(tk.END, "VaR –∞–Ω–∞–ª—ñ–∑ –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó\n")
    
    def refresh_risk_data(self):
        """Refresh risk data"""
        pass

class BacktestingFrame(ttk.Frame):
    """Backtesting frame"""
    
    def __init__(self, parent, trading_service):
        super().__init__(parent)
        self.trading_service = trading_service
        self.create_widgets()
    
    def create_widgets(self):
        """Create backtesting widgets"""
        
        # Title
        title_label = ttk.Label(self, text="üìä –ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥ –°—Ç—Ä–∞—Ç–µ–≥—ñ–π", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # Strategy configuration
        config_frame = ttk.LabelFrame(self, text="–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –°—Ç—Ä–∞—Ç–µ–≥—ñ—ó", padding=10)
        config_frame.pack(fill='x', padx=20, pady=10)
        
        # Strategy selection
        ttk.Label(config_frame, text="–°—Ç—Ä–∞—Ç–µ–≥—ñ—è:").grid(row=0, column=0, sticky='w', padx=5, pady=2)
        self.strategy_var = tk.StringVar(value="insider_following")
        strategy_combo = ttk.Combobox(config_frame, textvariable=self.strategy_var,
                                     values=["insider_following", "momentum", "mean_reversion"], 
                                     width=20, state='readonly')
        strategy_combo.grid(row=0, column=1, padx=5, pady=2)
        
        # Date range
        ttk.Label(config_frame, text="–ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞:").grid(row=1, column=0, sticky='w', padx=5, pady=2)
        self.start_date_var = tk.StringVar(value="2023-01-01")
        ttk.Entry(config_frame, textvariable=self.start_date_var, width=12).grid(row=1, column=1, padx=5, pady=2)
        
        ttk.Label(config_frame, text="–ö—ñ–Ω—Ü–µ–≤–∞ –¥–∞—Ç–∞:").grid(row=1, column=2, sticky='w', padx=5, pady=2)
        self.end_date_var = tk.StringVar(value="2024-01-01")
        ttk.Entry(config_frame, textvariable=self.end_date_var, width=12).grid(row=1, column=3, padx=5, pady=2)
        
        # Initial capital
        ttk.Label(config_frame, text="–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–∞–ø—ñ—Ç–∞–ª:").grid(row=2, column=0, sticky='w', padx=5, pady=2)
        self.initial_capital_var = tk.StringVar(value="100000")
        ttk.Entry(config_frame, textvariable=self.initial_capital_var, width=12).grid(row=2, column=1, padx=5, pady=2)
        
        # Run backtest button
        ttk.Button(config_frame, text="–ó–∞–ø—É—Å—Ç–∏—Ç–∏ –ë–µ–∫—Ç–µ—Å—Ç", 
                  command=self.run_backtest).grid(row=3, column=0, columnspan=2, pady=10)
        
        # Results frame
        results_frame = ttk.LabelFrame(self, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É", padding=10)
        results_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        self.results_text = tk.Text(results_frame, wrap='word')
        self.results_text.pack(fill='both', expand=True)
        
        results_scrollbar = ttk.Scrollbar(results_frame, orient='vertical', command=self.results_text.yview)
        results_scrollbar.pack(side='right', fill='y')
        self.results_text.configure(yscrollcommand=results_scrollbar.set)
    
    def run_backtest(self):
        """Run backtest"""
        self.results_text.delete('1.0', tk.END)
        self.results_text.insert(tk.END, "–ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥—É...\n\n")
        
        strategy = self.strategy_var.get()
        start_date = self.start_date_var.get()
        end_date = self.end_date_var.get()
        initial_capital = self.initial_capital_var.get()
        
        # Mock results
        self.results_text.insert(tk.END, f"–°—Ç—Ä–∞—Ç–µ–≥—ñ—è: {strategy}\n")
        self.results_text.insert(tk.END, f"–ü–µ—Ä—ñ–æ–¥: {start_date} - {end_date}\n")
        self.results_text.insert(tk.END, f"–ü–æ—á–∞—Ç–∫–æ–≤–∏–π –∫–∞–ø—ñ—Ç–∞–ª: ${initial_capital}\n\n")
        
        self.results_text.insert(tk.END, "–†–ï–ó–£–õ–¨–¢–ê–¢–ò:\n")
        self.results_text.insert(tk.END, "–ó–∞–≥–∞–ª—å–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å: +23.4%\n")
        self.results_text.insert(tk.END, "–†—ñ—á–Ω–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤—ñ—Å—Ç—å: +18.7%\n")
        self.results_text.insert(tk.END, "–í–æ–ª–∞—Ç–∏–ª—å–Ω—ñ—Å—Ç—å: 15.2%\n")
        self.results_text.insert(tk.END, "–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –®–∞—Ä–ø–∞: 1.23\n")
        self.results_text.insert(tk.END, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –ø—Ä–æ—Å–∞–¥–∫–∞: -8.9%\n")
        self.results_text.insert(tk.END, "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥: 47\n")
        self.results_text.insert(tk.END, "–í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏—Ö: 63.8%\n")

class DashboardFrame(ttk.Frame):
    """Interactive dashboard frame"""
    
    def __init__(self, parent, trading_service):
        super().__init__(parent)
        self.trading_service = trading_service
        self.create_widgets()
    
    def create_widgets(self):
        """Create dashboard widgets"""
        
        # Title
        title_label = ttk.Label(self, text="üìã –Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –î–∞—à–±–æ—Ä–¥", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # Metrics frame
        metrics_frame = ttk.Frame(self)
        metrics_frame.pack(fill='x', padx=20, pady=10)
        
        # Create metric cards
        self.create_metric_card(metrics_frame, "–ó–∞–≥–∞–ª—å–Ω—ñ –¢–æ—Ä–≥–∏", "0", 0, 0)
        self.create_metric_card(metrics_frame, "–ü–æ–∫—É–ø–∫–∏", "0", 0, 1)
        self.create_metric_card(metrics_frame, "–ü—Ä–æ–¥–∞–∂—ñ", "0", 0, 2)
        self.create_metric_card(metrics_frame, "ML –ü—Ä–æ–≥–Ω–æ–∑–∏", "0", 0, 3)
        
        self.create_metric_card(metrics_frame, "–°–µ—Ä–µ–¥–Ω—è –û—Ü—ñ–Ω–∫–∞", "0", 1, 0)
        self.create_metric_card(metrics_frame, "–ê–∫—Ç–∏–≤–Ω—ñ –ê–ª–µ—Ä—Ç–∏", "0", 1, 1)
        self.create_metric_card(metrics_frame, "–ü–æ—Ä—Ç—Ñ–µ–ª—ñ", "0", 1, 2)
        self.create_metric_card(metrics_frame, "–û—Å—Ç–∞–Ω–Ω—î –û–Ω–æ–≤–ª–µ–Ω–Ω—è", "N/A", 1, 3)
        
        # Charts frame
        charts_frame = ttk.LabelFrame(self, text="–ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è", padding=10)
        charts_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        # Placeholder for charts
        chart_placeholder = ttk.Label(charts_frame, text="–ì—Ä–∞—Ñ—ñ–∫–∏ –±—É–¥—É—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ñ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó", 
                                     font=('Arial', 12))
        chart_placeholder.pack(expand=True)
    
    def create_metric_card(self, parent, title, value, row, col):
        """Create a metric card"""
        card_frame = ttk.LabelFrame(parent, text=title, padding=10)
        card_frame.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
        
        value_label = ttk.Label(card_frame, text=value, font=('Arial', 14, 'bold'))
        value_label.pack()
        
        # Store reference for updates
        setattr(self, f"metric_{title.lower().replace(' ', '_')}", value_label)
    
    def update_dashboard(self, data):
        """Update dashboard with new data"""
        try:
            if hasattr(self, 'metric_–∑–∞–≥–∞–ª—å–Ω—ñ_—Ç–æ—Ä–≥–∏'):
                self.metric_–∑–∞–≥–∞–ª—å–Ω—ñ_—Ç–æ—Ä–≥–∏.config(text=str(data.get('total_trades', 0)))
            if hasattr(self, 'metric_–ø–æ–∫—É–ø–∫–∏'):
                self.metric_–ø–æ–∫—É–ø–∫–∏.config(text=str(data.get('purchase_trades', 0)))
            if hasattr(self, 'metric_–ø—Ä–æ–¥–∞–∂—ñ'):
                self.metric_–ø—Ä–æ–¥–∞–∂—ñ.config(text=str(data.get('sale_trades', 0)))
            if hasattr(self, 'metric_ml_–ø—Ä–æ–≥–Ω–æ–∑–∏'):
                self.metric_ml_–ø—Ä–æ–≥–Ω–æ–∑–∏.config(text=str(data.get('ml_predictions', 0)))
            if hasattr(self, 'metric_—Å–µ—Ä–µ–¥–Ω—è_–æ—Ü—ñ–Ω–∫–∞'):
                self.metric_—Å–µ—Ä–µ–¥–Ω—è_–æ—Ü—ñ–Ω–∫–∞.config(text=f"{data.get('avg_score', 0):.1f}")
            if hasattr(self, 'metric_–æ—Å—Ç–∞–Ω–Ω—î_–æ–Ω–æ–≤–ª–µ–Ω–Ω—è'):
                last_updated = data.get('last_updated')
                if last_updated:
                    self.metric_–æ—Å—Ç–∞–Ω–Ω—î_–æ–Ω–æ–≤–ª–µ–Ω–Ω—è.config(text=last_updated.strftime('%H:%M:%S'))
        except Exception as e:
            logger.error(f"Error updating dashboard: {e}")

class NewsFrame(ttk.Frame):
    """News and sentiment analysis frame"""
    
    def __init__(self, parent, trading_service):
        super().__init__(parent)
        self.trading_service = trading_service
        self.create_widgets()
    
    def create_widgets(self):
        """Create news and sentiment widgets"""
        
        # Title
        title_label = ttk.Label(self, text="üì∞ –ù–æ–≤–∏–Ω–∏ —Ç–∞ –ê–Ω–∞–ª—ñ–∑ –ù–∞—Å—Ç—Ä–æ—ó–≤", 
                               font=('Arial', 16, 'bold'))
        title_label.pack(pady=10)
        
        # News controls
        controls_frame = ttk.Frame(self)
        controls_frame.pack(fill='x', padx=20, pady=10)
        
        ttk.Label(controls_frame, text="–¢—ñ–∫–µ—Ä:").pack(side='left', padx=5)
        self.news_ticker_var = tk.StringVar()
        ttk.Entry(controls_frame, textvariable=self.news_ticker_var, width=10).pack(side='left', padx=5)
        ttk.Button(controls_frame, text="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ù–æ–≤–∏–Ω–∏", command=self.load_news).pack(side='left', padx=10)
        ttk.Button(controls_frame, text="–ê–Ω–∞–ª—ñ–∑ –ù–∞—Å—Ç—Ä–æ—ó–≤", command=self.analyze_sentiment).pack(side='left', padx=5)
        
        # News display
        news_frame = ttk.LabelFrame(self, text="–ù–æ–≤–∏–Ω–∏", padding=10)
        news_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        self.news_text = tk.Text(news_frame, wrap='word')
        self.news_text.pack(fill='both', expand=True)
        
        news_scrollbar = ttk.Scrollbar(news_frame, orient='vertical', command=self.news_text.yview)
        news_scrollbar.pack(side='right', fill='y')
        self.news_text.configure(yscrollcommand=news_scrollbar.set)
    
    def load_news(self):
        """Load news for ticker"""
        ticker = self.news_ticker_var.get().upper().strip()
        if not ticker:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä")
            return
        
        self.news_text.delete('1.0', tk.END)
        self.news_text.insert(tk.END, f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω –¥–ª—è {ticker}...\n\n")
        self.news_text.insert(tk.END, "–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –Ω–æ–≤–∏–Ω–Ω–∏–º–∏ API –±—É–¥–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó\n")
    
    def analyze_sentiment(self):
        """Analyze sentiment"""
        ticker = self.news_ticker_var.get().upper().strip()
        if not ticker:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–∫–µ—Ä")
            return
        
        self.news_text.insert(tk.END, f"\n–ê–Ω–∞–ª—ñ–∑ –Ω–∞—Å—Ç—Ä–æ—ó–≤ –¥–ª—è {ticker}:\n")
        self.news_text.insert(tk.END, "‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π: –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π (0.65)\n")
        self.news_text.insert(tk.END, "‚Ä¢ –ù–æ–≤–∏–Ω–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π: –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π (0.12)\n")
        self.news_text.insert(tk.END, "‚Ä¢ –°–æ—Ü—ñ–∞–ª—å–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π: –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π (0.78)\n")
        self.news_text.insert(tk.END, "‚Ä¢ –ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –Ω–∞—Å—Ç—Ä—ñ–π: –ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π (0.55)\n")